const int maxLightCount = 127;

struct Light {
	vec4 vector;
	vec4 colour;
	vec4 data1;
	vec4 data2;
};

layout(std140) uniform LightInformation {
	Light u_lights[maxLightCount];
	int numLights;
};

in vec2 pass_uv;
in vec3 pass_normal;
in vec3 pass_worldPos;
in vec3 pass_cameraPos;
in vec4 pass_shadowCoords;

uniform sampler2D t_shadowMap;

vec4 getLightVector(Light light) {
	int type = int(light.vector.x);

	if(type == 1) {
		// point light
		vec3 dir = normalize(light.vector.yzw - pass_worldPos);
		float dist = length(dir);
		float attenuation = 1.0 / (light.data1.x + light.data1.y * dist + light.data1.z * (dist * dist));    
		return vec4(dir, attenuation);		
	}
	
	if(type == 2)
		// directional light
		return vec4(normalize(-light.vector.yzw), 1.0);

	if(type == 3) {
		// spot light
		vec3 dir = normalize(light.vector.yzw - pass_worldPos);
		vec3 lightDir = vec3(-light.data1.xyz);
		float theta = dot(dir, lightDir);
		if(theta > light.data2.x) {
			float epsilon   = light.data2.x - light.data1.w;
			float intensity = clamp((theta - light.data2.x) / epsilon, 0.0, 1.0);
			float dist = length(dir);
			float attenuation = 1.0 / (light.data2.y + light.data2.z * dist + light.data2.w * (dist * dist));   
			return vec4(dir, intensity * attenuation);
		}
	
		return vec4(0.0);
	}
	
	return vec4(1, 0, 0, 1);
}

float calculateShadows(vec3 normal, vec3 lightDirection) {
	float bias = max(0.0002 * (1.0 - dot(normal, lightDirection)), 0.001);
	
	int SIZE = 1;
	float shadowFactor = 0.0;
	vec2 texelSize = 1.0 / textureSize(t_shadowMap, 0);
		
	for(int x = -SIZE; x <= SIZE; ++x) {
		for(int y = -SIZE; y <= SIZE; ++y) {
			float objectNearest = texture(t_shadowMap, pass_shadowCoords.xy + vec2(x, y) * texelSize).r;
			if(pass_shadowCoords.z - bias > objectNearest)
				shadowFactor += 1;
		}
	}
	
	return 1.0 - (shadowFactor / ((SIZE * 2 + 1) * (SIZE * 2 + 1))) * 0.7;
}

float calculateShadows() {
	float objectNearest = texture(t_shadowMap, pass_shadowCoords.xy).r;
	float lightFactor = 1.0;
	if(pass_shadowCoords.z > objectNearest)
		lightFactor = 0.1;
		
	return lightFactor;
}